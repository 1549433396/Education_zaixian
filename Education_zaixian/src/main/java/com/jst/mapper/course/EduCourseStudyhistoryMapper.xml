<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jst.mapper.course.EduCourseStudyhistoryMapper" >
  <!-- <resultMap id="BaseResultMap" type="com.jst.model.EduCourseStudyhistory" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="USER_ID" property="userId" jdbcType="INTEGER" />
    <result column="COURSE_ID" property="courseId" jdbcType="INTEGER" />
    <result column="KPOINT_ID" property="kpointId" jdbcType="INTEGER" />
    <result column="PLAYERCOUNT" property="playercount" jdbcType="INTEGER" />
    <result column="COURSE_NAME" property="courseName" jdbcType="VARCHAR" />
    <result column="KPOINT_NAME" property="kpointName" jdbcType="VARCHAR" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jst.model.EduCourseStudyhistory" extends="BaseResultMap" >
    <result column="DATABACK" property="databack" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, USER_ID, COURSE_ID, KPOINT_ID, PLAYERCOUNT, COURSE_NAME, KPOINT_NAME, UPDATE_TIME
  </sql>
  <sql id="Blob_Column_List" >
    DATABACK
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.jst.model.EduCourseStudyhistoryExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from edu_course_studyhistory
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jst.model.EduCourseStudyhistoryExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from edu_course_studyhistory
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from edu_course_studyhistory
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from edu_course_studyhistory
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jst.model.EduCourseStudyhistoryExample" >
    delete from edu_course_studyhistory
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jst.model.EduCourseStudyhistory" >
    insert into edu_course_studyhistory (ID, USER_ID, COURSE_ID, 
      KPOINT_ID, PLAYERCOUNT, COURSE_NAME, 
      KPOINT_NAME, UPDATE_TIME, DATABACK
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, 
      #{kpointId,jdbcType=INTEGER}, #{playercount,jdbcType=INTEGER}, #{courseName,jdbcType=VARCHAR}, 
      #{kpointName,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{databack,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jst.model.EduCourseStudyhistory" >
    insert into edu_course_studyhistory
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="courseId != null" >
        COURSE_ID,
      </if>
      <if test="kpointId != null" >
        KPOINT_ID,
      </if>
      <if test="playercount != null" >
        PLAYERCOUNT,
      </if>
      <if test="courseName != null" >
        COURSE_NAME,
      </if>
      <if test="kpointName != null" >
        KPOINT_NAME,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
      <if test="databack != null" >
        DATABACK,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="kpointId != null" >
        #{kpointId,jdbcType=INTEGER},
      </if>
      <if test="playercount != null" >
        #{playercount,jdbcType=INTEGER},
      </if>
      <if test="courseName != null" >
        #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="kpointName != null" >
        #{kpointName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="databack != null" >
        #{databack,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jst.model.EduCourseStudyhistoryExample" resultType="java.lang.Integer" >
    select count(*) from edu_course_studyhistory
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update edu_course_studyhistory
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        USER_ID = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null" >
        COURSE_ID = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.kpointId != null" >
        KPOINT_ID = #{record.kpointId,jdbcType=INTEGER},
      </if>
      <if test="record.playercount != null" >
        PLAYERCOUNT = #{record.playercount,jdbcType=INTEGER},
      </if>
      <if test="record.courseName != null" >
        COURSE_NAME = #{record.courseName,jdbcType=VARCHAR},
      </if>
      <if test="record.kpointName != null" >
        KPOINT_NAME = #{record.kpointName,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.databack != null" >
        DATABACK = #{record.databack,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update edu_course_studyhistory
    set ID = #{record.id,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      COURSE_ID = #{record.courseId,jdbcType=INTEGER},
      KPOINT_ID = #{record.kpointId,jdbcType=INTEGER},
      PLAYERCOUNT = #{record.playercount,jdbcType=INTEGER},
      COURSE_NAME = #{record.courseName,jdbcType=VARCHAR},
      KPOINT_NAME = #{record.kpointName,jdbcType=VARCHAR},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      DATABACK = #{record.databack,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update edu_course_studyhistory
    set ID = #{record.id,jdbcType=INTEGER},
      USER_ID = #{record.userId,jdbcType=INTEGER},
      COURSE_ID = #{record.courseId,jdbcType=INTEGER},
      KPOINT_ID = #{record.kpointId,jdbcType=INTEGER},
      PLAYERCOUNT = #{record.playercount,jdbcType=INTEGER},
      COURSE_NAME = #{record.courseName,jdbcType=VARCHAR},
      KPOINT_NAME = #{record.kpointName,jdbcType=VARCHAR},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jst.model.EduCourseStudyhistory" >
    update edu_course_studyhistory
    <set >
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null" >
        COURSE_ID = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="kpointId != null" >
        KPOINT_ID = #{kpointId,jdbcType=INTEGER},
      </if>
      <if test="playercount != null" >
        PLAYERCOUNT = #{playercount,jdbcType=INTEGER},
      </if>
      <if test="courseName != null" >
        COURSE_NAME = #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="kpointName != null" >
        KPOINT_NAME = #{kpointName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="databack != null" >
        DATABACK = #{databack,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jst.model.EduCourseStudyhistory" >
    update edu_course_studyhistory
    set USER_ID = #{userId,jdbcType=INTEGER},
      COURSE_ID = #{courseId,jdbcType=INTEGER},
      KPOINT_ID = #{kpointId,jdbcType=INTEGER},
      PLAYERCOUNT = #{playercount,jdbcType=INTEGER},
      COURSE_NAME = #{courseName,jdbcType=VARCHAR},
      KPOINT_NAME = #{kpointName,jdbcType=VARCHAR},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      DATABACK = #{databack,jdbcType=LONGVARCHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jst.model.EduCourseStudyhistory" >
    update edu_course_studyhistory
    set USER_ID = #{userId,jdbcType=INTEGER},
      COURSE_ID = #{courseId,jdbcType=INTEGER},
      KPOINT_ID = #{kpointId,jdbcType=INTEGER},
      PLAYERCOUNT = #{playercount,jdbcType=INTEGER},
      COURSE_NAME = #{courseName,jdbcType=VARCHAR},
      KPOINT_NAME = #{kpointName,jdbcType=VARCHAR},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update> -->
</mapper>